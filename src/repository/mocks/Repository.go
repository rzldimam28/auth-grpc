// Code generated by mockery v2.31.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/rzldimam28/auth-grpc/src/entity"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
	
}

// FindByEmail provides a mock function with given fields: ctx, tx, email
func (_m *Repository) FindByEmail(ctx context.Context, tx *sql.Tx, email string) (*entity.User, error) {
	ret := _m.Called(ctx, tx, email)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) (*entity.User, error)); ok {
		return rf(ctx, tx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) *entity.User); ok {
		r0 = rf(ctx, tx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, tx, user
func (_m *Repository) InsertUser(ctx context.Context, tx *sql.Tx, user entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, tx, user)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, entity.User) (*entity.User, error)); ok {
		return rf(ctx, tx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, entity.User) *entity.User); ok {
		r0 = rf(ctx, tx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, entity.User) error); ok {
		r1 = rf(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
